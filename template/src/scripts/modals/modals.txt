Чтобы создать контент для модалки нужно внутри класса контента создать переменную которая хранит все объекты в массиве
  private _elements: (Phaser.GameObjects.Text | Phaser.GameObjects.Sprite)[] = []

Чтобы потом использовать это в функции pushElementsToContainer, которую тоже нужно создать
Так же нужно создать функцию destroy
  
```
  public pushElementsToContainer(): void {
    this._modal.add(this._elements)
  }

  public destroy(): void {
    this._elements.forEach(el => {
      el.destroy()
    })
  }
```

Эти функции используются в Modal.ts


Что нужно для вызова контента на примере ratings:

1. GameActions.ts

В функцию rating нужно добавить код, который будет вызывать модалку и указать что контент в модалке будет рейтинги: Settings.setModal(modal.RATING)
Так же нужно дизейблить все интерактивные блоки на Game сцене с помощью _disableInteractive()

```
  private _rating(): void {
    Settings.setModal(modal.RATING)
    const newModal = new Modal(this._scene)
    newModal.closeModalCallback = this._activeInteractive.bind(this)
    this._disableInteractive()
  }
```

2. Modal.ts
Добавить свойство для контента private _content: Ratings

В 37 строке нужно добавить проверку на контент модалки и вызвать сооствестующий контент

```
    if (Settings.getModal() === modal.RATING) {
      this._content = new Ratings(this._scene, this)
    }
```

в 40 строчке вызывать метод у контента между добавлением спрайта модалки в контейнер и кнопки закрытие с зоной 
```
    this.add([this.sprite])
    this._content.pushElementsToContainer()
    this.add([this.btn, btnZone])
```

В 108 строке вызвать метод .destroy() у контента

```
this._scene.tweens.add({
      targets: this,
      x: centerX,
      y: centerY + 100,
      ease: 'Power1',
      duration: this._scene.config.durations.animationModalStepSecond,
      onComplete: () => {
        this._scene.tweens.add({
          targets: this,
          x: centerX,
          y: -1000,
          ease: 'Power1',
          duration: this._scene.config.durations.animationModalStepFirst,
          onComplete: () => {
            this.removeAll(true)
            this.destroy()
            this.closeModalCallback()
            this._content.destroy()
          }
        })
      }
    })
```